1.Difference between HTTP1.1 vs HTTP2.

     HTTP/1.1 Loads resources one after the other, so if one resource cannot be loaded, 
it blocks all the other resources behind it. In contrast, HTTP/2 is able to use a single TCP connection 
to send multiple streams of data at once so that no one resource blocks any other resource.

HTTP/1.1:
-> It works on the textual format.
-> There is head of line blocking that blocks all the requests behind it until it doesn’t get its all resources.
-> It uses requests resource Inlining for use getting multiple pages
-> It compresses data by itself.   

HTTP/2:
-> It works on the binary protocol.    
-> It allows multiplexing so one TCP connection is required for multiple requests.    
-> It uses PUSH frame by server that collects all multiple pages 
-> It uses HPACK for data compression.

------------------------------------------------------

2.Objects and its internal representation in Javascript.

    Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. 
These objects are quite different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol) 
in the sense that while these primitive data-types all store a single value each (depending on their types).
    
    Objects are variables too. But objects can contain many values.
The values are written as name:value pairs (name and value separated by a colon). (for example name:"soundar",age:23).
You define (and create) a JavaScript object with an object literal:
    
A JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to the object. 
Object properties are basically the same as ordinary JavaScript variables, except for the attachment to objects. 
The properties of an object define the characteristics of the object. You access the properties of an object with a simple dot-notation:

-> objectName.propertyName

The syntax to access a property from an object is:
objectName.property        
           //or
objectName["property”]     
           //or
objectName[expression]  

Example :
        const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
  };
  console.log(person.firstName);
   output ->John

---------------------------------------------------------------------------------------------------

